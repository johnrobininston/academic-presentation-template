---
title: Academic Presentation Template
subtitle: A Minimalistic Theme for Quarto + Typst + Touying
date: today
date-format: long
image: static/img/thumbnail.svg
author:
  - name: John Robin Inston
    orcid: 0009-0001-7285-6823
    email: johninston@ucsb.edu
    affiliations: UC Santa Barbara
format:
  academic-presentation-template-typst::
    bibliographystyle: "chicago-author-date"
    include-in-header: "custom.typ"
    commands: [small-cite]
execute: 
  echo: false
  warning: false
bibliography: [static/references.bib]
brand:
  typography: 
    fonts: 
      - family: Montserrat
        source: google
        weight: [light, bold]
        style: [normal, italic]
      - family: Josefin Sans
        weight: semi-bold
        source: google
      - family: Fira Code
        source: google
      - family: Libertinus Serif
        source: google
    base:
      family: Montserrat
      weight: light
    headings:
      family: Josefin Sans
      weight: semi-bold
    monospace:
      family: Fira Code
      size: 0.9em
  color:
    palette:
      black: "#131516"
      green: "#009F8C"
      pink: "#B75C9D"
    foreground: black
    primary: green
    secondary: pink
knitr:
  opts_chunk: 
    fig.align: center
    dev: png
---

# Section Slide as Header Level 1

## Slide Title as Header Level 2

### Subtitle as Header Level 3

You can put any content here, including text, images, tables, code blocks, etc.

- first unorder list item
    - A sub item

1. first ordered list item
    1. A sub item

Next, we'll brief review some theme-specific components.

- Note that _all_ of the standard Quarto + Typst
[features](https://quarto.org/docs/output-formats/typst.html) 
can be used with this theme
- Also, all the [Touying](https://touying-typ.github.io) features can be used by **Typst native code**

## Before You Go...

The [clean theme](https://github.com/kazuyanagimoto/quarto-clean-typst) does not depend on any languages.
You can use it with any language supported by Quarto, including R, Python, Julia.

For this demo, I use R code to show the figures and tables usage in the slides.

{{< v 0.5em >}}

::: {.callout-warning}

## Required Software (this demo only)

R Packages:

```{.r}
install.packages(c("modelsummary", "tinytable", "dplyr", "ggplot2", "showtext"))
```

:::


# Components

## Components

### Ordered & Unordered Lists

Here we have an unordered list.

- first item
    - sub-item
- second item

And next we have an ordered one.

1. first item
    1. sub-item
1. second item

## Components

### Alerts & Cross-refs {#sec-crossref}


Special classes for emphasis

- `.alert` class for default emphasis, e.g. [the second accent color]{.alert}.
- `.fg` class for custom color, e.g. [with `options='fill: rgb("#5D639E")'`]{.fg options='fill: rgb("#5D639E")'}.
- `.bg` class for custom background, e.g. [with the default color]{.bg}.

To cross-reference, you have several options, for example:

- Beamer-like .button class provided by this theme, e.g. [[Appendix]{.button}](#sec-appendix)
- Sections are not numbered in Touying, you cannot use `@sec-` cross-references

## Components

### Citations

Citations follow the standard
[Quarto format](https://quarto.org/docs/authoring/footnotes-and-citations.html#citations)
and be sourced from BibLaTeX, BibTeX, or CLS files. For example:

- [Topic 1:]{.alert} Review of DID [@arkhangelsky2024]

- [Topic 2:]{.alert} @goodman-bacon2021

### Small Citations

In many cases, you may want to use small citations, like

- [Staggered DID]{.alert} 

This `.small-cite` class is defined as a custom style [[custom styling]{.button}](#sec-custom-styling)

## Components

### Blocks

Quarto provides
[dedicated environments](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs)
for theorems, lemmas, and so forth. 

But in presentation format, it's arguably more effective just to use a
[Callout Block](https://quarto.org/docs/authoring/callouts.html).

:::{.callout-note}

## Regression Specification

The main specification is as follows:

$$
y_{it} = X_{it} \beta + \mu_i + \varepsilon_{it}
$$

:::

## Components

### Multicolumn I: Text only

:::: {layout-ncol=2}

::: {#first-column}

[Column 1]{.alert}

Here is a long sentence that will wrap onto the next line as it hits the column
width, and continue this way until it stops.

Some text that should be laid out below the code

:::

::: {#second-column}

[Column 2]{.alert}

Some other text in another column.

A second paragraph.

:::

::::

[Quarto's layout](https://quarto.org/docs/authoring/figures.html#block-layout) is more simple and flexible than Touying's native multicolumn support.

## Components
### Multicolumn II: Text and Figures

::: {layout-ncol=2}

![](static/img/hokusai_kanagawa.jpg)

- First point
- Second point

:::

For simple cases, you don't even need to specify the class for each column.

## Ad-hoc Styling

### Typst CSS

- Quarto supports [Typst CSS](https://quarto.org/docs/advanced/typst/typst-css.html) for simple styling
- You can change [colors]{style="color: #009F8C"}, [backgrounds]{style="background-color: #F0F0F0"}, and [opacity]{style="opacity: 0.5"} for `span` elements

::: {style="font-size: 30pt; font-family: 'Times New Roman'"}

You can also change the font size and family for `div` elements.

:::

{{< v 1em >}}

### Vertical Spacing

- A helper shortcode `{{{< v DIST >}}}` is provided to add vertical spacing
- This is converted to a Typst code `#v(DIST)` internally.

{{< v 2em >}}

This is a `2em` vertical spaced from above.

## Custom Styling {#sec-custom-styling}

As [latex-environment](https://github.com/quarto-ext/latex-environment) quarto extenstion, you can define custom `div` and `span` elements.

```yaml
format:
  clean-typst:
    include-in-header: "custom.typ"
    commands: [foo]
```

- You can define custom `div` and `span` elements as Typst functions in `custom.typ` 
  - `environments` in YAML is for block elements `:::{.foo}\nbody\n:::`
  - `commands` in YAML is for inline elements `[]{.foo}`
- `[text]{.foo options="opts"}` is converted to `#foo(opts)[text]` internally
- If you want to use `self` as an argument, you can use `touying-fn-wrapper()`


## `brand.yml` Support

```yaml
brand:
  typography: 
    base: Montserrat
    headings:
      family: Josefin Sans
      weight: semi-bold
    color:
      palette:
        green: "#009F8C"
        pink: "#B75C9D"
      primary: green
      secondary: pink
```

- This template supports [`brand.yml`](https://posit-dev.github.io/brand-yml/) for typography and color settings
- See [`template-brand.qmd`](https://github.com/kazuyanagimoto/quarto-clean-typst/blob/main/template-brand.qmd) for the full example


# Animations

## Simple Animations {#sec-simple-animation}

Touying's [simple animations](https://touying-typ.github.io/docs/dynamic/simple) is available as `{{{< pause >}}}` and `{{{< meanwhile >}}}`

{{< pause >}}

This line appears after a pause.

{{< meanwhile >}}

This line appears meanwhile.

. . .

As Reveal.js, you can use `. . .` for a pause in the slide.

## Animations in Lists

**Pause in Lists**

Simple animations `{{{< pause >}}}` can be used in lists

- First {{< pause >}}
- Second

**Incremental Class**

As Reveal.js, you can use `.incremental` class

::: {.incremental}

- First
- Second

:::


## Complex Animations {#sec-complex-animation}

:::: {.complex-anim repeat=4}

Touying's [complex animations](https://touying-typ.github.io/docs/dynamic/complex) is available as `{.complex-anim repeat=4}` environment.


At subslide `#self.subslide`{=typst}, we can

use [`{.uncover}` environment]{.uncover options='"2-"'} for reserving space,

use [`{.only}` environment]{.only options='"2-"'} for not reserving space,

```{=typst}
#alternatives[call `#only` multiple times \u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. But only works in a native Typst code. \
```

::: {.only options='4'}

### Other Features

- All the animation functions can be used in Typst Math code [[Appendix]{.button}](#sec-math-animations)
- `handout: true` in YAML header is available for handout mode (without animations)

:::

::::


# Figures & Tables

```{r}
#| label: setup
library(dplyr)
library(ggplot2)
library(tinytable)
library(modelsummary)
library(showtext)

options(tinytable_quarto_figure = TRUE) # Figures without captions

color_accent <- "#107895"
color_accent2 <- "#9a2515"
color_accent3 <- "#e64173"

font_base_regular <- "Roboto Condensed"
font_base_light <- "Roboto Condensed Light"

# font_add_google(font_base_regular, font_base_light)
showtext_auto()

theme_quarto <- function(
  font_title = font_base_regular,
  font_text = font_base_light,
  size_base = 25
) {
  ggplot2::theme_minimal(base_family = font_text, base_size = size_base) +
    ggplot2::theme(
      plot.title = ggplot2::element_text(
        size = size_base * 1.2,
        face = "bold",
        family = font_title
      ),
      plot.subtitle = ggplot2::element_text(
        size = size_base,
        face = "plain",
        family = font_text
      ),
      plot.caption = ggplot2::element_text(
        size = size_base * 0.6,
        color = "grey50",
        face = "plain",
        family = font_text,
        margin = ggplot2::margin(t = 10)
      ),
      panel.grid.minor = ggplot2::element_blank(),
      strip.text = ggplot2::element_text(
        size = size_base * 0.9,
        hjust = 0,
        family = font_text,
        face = "bold"
      ),
      strip.background = ggplot2::element_rect(
        fill = "#ffffff",
        color = NA
      ),
      axis.ticks = ggplot2::element_blank(),
      axis.title = ggplot2::element_text(
        family = font_text,
        face = "plain",
        size = size_base * 0.8
      ),
      axis.title.x = ggplot2::element_text(
        margin = ggplot2::margin(t = 5)
      ),
      axis.text = ggplot2::element_text(
        family = font_text,
        face = "plain"
      ),
      legend.title = ggplot2::element_blank(),
      legend.key = ggplot2::element_blank(),
      legend.text = ggplot2::element_text(
        size = size_base * 0.75,
        family = font_text,
        face = "plain"
      ),
      legend.spacing = ggplot2::unit(0.1, "lines"),
      legend.box.margin = ggplot2::margin(t = -0.5, unit = "lines"),
      legend.margin = ggplot2::margin(t = 0),
      legend.position = "bottom",
      plot.title.position = "plot"
    )
}
```

## Python Figures

This is a test of producing figures.  In-line code looks like:

```{python}
import numpy as np
a = np.array([1,2,3,4,5])
b = a**2
print(b)
```

The plot of this function then looks like:

```{python}
#| fig-width: 12
#| fig-height: 1
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(10, 2)) # Width and height in inches
plt.plot(a,b)
plt.show()
```


## R Figures

```{r}
a <- 1:5
b <- a^2
plot(a,b)
```

## Tables

| Markdown Table | Example | Number |
| -------------- | ------- | ------ |
| 1 | 2 | 3 | 
| 1 | 2 | 3 | 

# Appendix {#sec-appendix}

## Touying Math Animations {#sec-math-animations}

```{.typst}
Touying equation with pause:
$
  f(x) &= pause x^2 + 2x + 1  \
       &= pause (x + 1)^2  \
$
Touying equation is very simple.
```

Touying equation with pause:

```{=typst}
$
  f(x) &= pause x^2 + 2x + 1  \
       &= pause (x + 1)^2  \
$
```


{{< meanwhile >}}

Touying equation is very simple.

[[Back to main]{.button}](#sec-custom-styling)

## References

::: {#refs}
:::
